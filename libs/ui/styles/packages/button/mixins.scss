@import "./variables.scss";
@import "../transition/mixins.scss";
@import "../icon/mixins.scss";
@import "../typography/mixins.scss";

@mixin btn-icon() {
  @include transition((color));
  @include icon();

  display: inline-block;
  cursor: pointer;
  color: $btn-icon-color;
  user-select: none;

  &:hover,
  &:focus,
  &--focus {
    color: $btn-icon-color-hover !important;
  }

  &:active,
  &--active {
    color: $btn-icon-color-active !important;
  }
}

@mixin btn-base() {
  @include transition((color, background-color, box-shadow));
  @include typography(regular);
  @include text-ellipsis();

  display: inline-flex;
  align-items: center;
  justify-content: center;
  border-radius: $btn-border-radius;
  border-width: 1px;
  border-style: solid;
  height: $atom * 4;
  padding: 0 $size-md;
  border-style: solid;
  box-sizing: border-box;
  margin: 0;
  position: relative;
  user-select: none;
  cursor: pointer;
  outline: none;

  &__icon {
    display: flex;
    align-items: center;
    justify-content: center;
    width: $size-sm;
    height: $size-sm;
  }
}

@mixin btn-color-variant($root, $name) {
  $style: map-get($button-styles, $name);
  $default-style: map-get($style, default);
  $disabled-style: map-get($style, disabled);
  $focus-style: map-get($style, focus);
  $active-style: map-get($style, active);

  color: map-get($default-style, color);
  background-color: map-get($default-style, background);
  border-color: map-get($default-style, border);

  &:disabled,
  &#{$root}--disabled {
    opacity: 0.5;
    pointer-events: none;
    background-color: map-get($disabled-style, background);
    border-color: map-get($disabled-style, border);
    color: map-get($disabled-style, color);
  }

  &:hover,
  &#{$root}--focus {
    background-color: map-get($focus-style, background);
    border-color: map-get($focus-style, border);
    color: map-get($focus-style, color);
    box-shadow: $btn-shadow;
    @if $name == primary {
      &::after {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        box-sizing: border-box;
        background-color: transparent;
        border: 1px solid var(--color-special-color-white-background);
        border-radius: $btn-border-radius;
      };
    } @else if $name == secondary {
      &::after {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        box-sizing: border-box;
        background-color: transparent;
        border: 1px solid var(--color-special-color-white-background);
        border-radius: $btn-border-radius;
      };
    }
  }

  &:active,
  &#{$root}--active {
    background-color: map-get($active-style, background);
    border-color: map-get($active-style, border);
    color: map-get($active-style, color);
    box-shadow: none;

    @if $name == primary {
      &::after {
        border: none;
      };
    }
  }
}

@mixin btn-outline() {
  &--outlined {
    border-color: $btn-outline-border-color !important;
    box-shadow: 0 0 0 1px $btn-outline-color !important;
  }
}

@mixin btn-size-variant($name) {
  $size: map-get($button-sizes, $name);
  $padding: map-get($size, padding);

  height: map-get($size, height);
  font-size: map-get($size, font-size);
  padding: 0 $padding;

  &__icon {
    margin-right: $size-xs;
    margin-left: $size-xs;

    &--left {
      margin-left: -$size-xs;
    }

    &--right {
      margin-right: -$size-xs;
    }
  }
}

@mixin btn-group() {
  display: flex;
  align-items: center;
  justify-content: left;
  flex-flow: row;
  flex-wrap: nowrap;

  .krui-btn {
    border-radius: 0;
    margin-left: 1px;

    &:first-child {
      border-top-left-radius: $btn-border-radius;
      border-bottom-left-radius: $btn-border-radius;
      margin-left: 0px;
    }

    &:last-child {
      border-top-right-radius: $btn-border-radius;
      border-bottom-right-radius: $btn-border-radius;
    }
  }
}
